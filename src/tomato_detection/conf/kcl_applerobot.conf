loopRate = 100.0;           # Hz

linearErrorThreshold = 0.04; #0.01;       # m
angularErrorThreshold = 0.1; #0.1;     # rad

cartesianMoveTimeout = 40.0;   #sec
#saturationMax = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4];
#saturationMin = [-0.4, -0.4, -0.4, -0.4, -0.4, -0.4];
#saturationMax = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4];
#saturationMin = [-0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4];
#saturationMax = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
#saturationMin = [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0];
saturationMax = [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0];
saturationMin = [-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0];
positionGainJoints = 1.0
positionGainCart = 1.0

states: {


}

### A task can be:
### - Reactive
### - NonReactive

### A NonReactive task must have: 
### - gain(irrelevant for non reactive task but must be present)
### - enable
### - saturation
### - saturateRaferenceRateComponentWise [*optional*]

### A Reactive task must have:
### - type: - 0, equality task
###         - 1, inequality task. For an inequality task you must be specify: - greaterThanParams, x >= x_bar (decreasingBellShaped, e.g. Avoidance)
###									                                          - lessThanParams, x <= x_bar    (increasingBellShaped)
###                                                                           - greaterThanParams and lessThanParams, x_barMin <= x <= x_barMax
### - gain
### - enable
### - saturation
### - saturateRaferenceRateComponentWise [*optional*]

### For task of cartesianDistance and cartesianOrientation type is present another option:
### - useVirtualFrame: define a virtual frame to follow instead of giving the final pose of the point to reach.
### - if is true, you have to specify: - virtualFrameType, 0: FullPose, 1: Angular, 2:Linear
###                                    - virtualFrameGain
###                                    - virtualFrameSampleTime
###                                    - onTrackAllowedDistance
###                                    - crossTrackAllowedDistance

### For tasks of type *JointsLimit insted* of specify greater/lessThanParams we need to specify:
### - activationStartDistanceGreaterThanParams, the distance from min joints bound at which we want our activation decreasing function starting
### - activationStartDistanceLessThanParams, the distance from max joints bound at which we want our increasing activation function starting
### - activationIntervalLengthGreaterThenParams, the length of the decreasing activation function interval
### - activationIntervalLengthLessThenParams, the length of the increasing activation function interval

tasks: {

    JointsLimit: {
        type = 1;     # 0 equality, 1 inequality
        gain = 0.02;
        enable = true;
        saturation = 0.5;
        #saturateRaferenceRateComponentWise = true; #if you want this option active, you have to explicitly add this field,
                                                    # otherwise do not enter the param in the task
        activationStartDistanceGreaterThanParams = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5];
        activationStartDistanceLessThanParams = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5];
        activationIntervaLengthGreaterThanParams = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2];
        activationIntervaLengthLessThanParams = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2];
    }
    
    ObstacleAvoidance: {
        type = 1;     # 0 equality, 1 inequality
        gain = 0.5;
        enable = true;
        saturation = 0.5;
        greaterThanParams: {
            xmin = [0.01];
            xmax = [0.2];
        }
    }
    
    
    JointsPosition: {
        type = 0;     # 0 equality, 1 inequality
        gain = 16.0;
        enable = true;
        #saturation = 1.0;
        saturation = 10.0;
    }
    
    
    JointsVelocity: {
        type = 0;     # 0 equality, 1 inequality
        gain = 0.1; # MODIFIED --> 1.0 before
        enable = true;
        saturation = 0.2;
    }
    
    
    ToolCartesianDistance: {
        type = 0;     # 0 equality, 1 inequality
        gain = 20.0;
        enable = true;
        saturation = 10.0; 
        #saturateRaferenceRateComponentWise = true; #if you want this option active, you have to explicitly add this field, otherwise do not enter the param in the task
        useVirtualFrame = false; 
        virtualFrameType = 2;  #0: FullPose, 1: Angular, 2:Linear
        virtualFrameGain= [0.15,0.15];
        virtualFrameSampleTime = 0.1;
        onTrackAllowedDistance = [4.0, 4.5];
        crossTrackAllowedDistance = [0.5, 1.0];
    }
     
    ToolCartesianOrientation: {
        type = 0;     # 0 equality, 1 inequality
        gain = 20.0;
        enable = true;
        saturation = 10.0;
        #saturateRaferenceRateComponentWise = true; #if you want this option active, you have to explicitly add this field, otherwise do not enter the param in the task
        useVirtualFrame = false; 
        virtualFrameType = 1;  #0: FullPose, 1: Angular, 2:Linear
        virtualFrameGain= [0.15,0.15];
        virtualFrameSampleTime = 0.1;
        onTrackAllowedDistance = [4.0, 4.5];
        crossTrackAllowedDistance = [0.5, 1.0];
    }
    

}


priorityLevels: (

    { name: "PL_Safety";
        #tasks = ["JointsLimit","ObstacleAvoidance"];
        tasks = ["JointsLimit"];
        lambda = 0.0001;
        threshold = 0.01;
    },

    { name: "PL_MoveJointsPosition";
        tasks: ["JointsPosition"];
        lambda = 0.1;
        threshold = 0.01;
    },
        
   { name: "PL_MoveJointsVelocity";
        tasks: ["JointsVelocity"];
        lambda = 0.0001;
        threshold = 0.01;
    },
        
    { name: "PL_MoveTool";
        #tasks: ["ToolCartesianDistance","ToolCartesianOrientation"];
        tasks: ["ToolCartesianDistance"];
        #tasks: ["ToolCartesianOrientation"];
        lambda = 0.0001;
        threshold = 0.01;
    }
);


actions: (

    {  name: "Idle";
        levels: ["PL_Safety"];
    },
       
    {  name: "ParkUnpark";
        levels: ["PL_MoveJointsPosition"];
    },
       
    {  name: "MoveJointsPosition";
        levels: ["PL_Safety", "PL_MoveJointsPosition"];
    },
       
    {  name: "MoveJointsVelocity";
        levels: ["PL_Safety", "PL_MoveJointsVelocity"];
    },

    {  name: "MoveTool";
        #levels: ["PL_Safety", "PL_MoveTool"];
        levels: [ "PL_MoveTool"];
    }

);
